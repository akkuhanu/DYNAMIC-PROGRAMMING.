#include<bits/stdc++.h>
#define ll long long
#define pb push_back
#define fr(a,b) for(ll i = a; i < b; i++)
#define rep(i,a,b) for(ll i = a; i < b; i++)
#define mod 1000000007
#define inf (1LL<<60)
#define nline cout<<'\n'
#define all(x) (x).begin(), (x).end()
#define prDouble(x) cout << fixed << setprecision(10) << x
#define triplet pair<ll,pair<ll,ll>>
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
using namespace std;


// COIN COMBINATION-1 ---> CSES PROBLEMSET.


// also the coins which used to form the sum is  given to us.
// as an input unlike we preknown that it 1 to 6 in dice combination problem.


//TOP DOWN APPROCH.
int sumi(ll i,ll arr[],vector<ll>& dp,int n1){
    if(dp[i]!=-1){
        return dp[i];
    }
    if(i<0){
        return 0;
    }
    else{
        int ans = 0;
        rep(x,1,n1+1){

            if(i>=arr[x]){

                ans = ans + sumi(i-arr[x],arr,dp,n1);

            }
        }
        return dp[i] = ans;
    }
}

int main() {

    fast_io;
    #ifndef ONLINE_JUDGE
    freopen("inputf.in","r",stdin);
    freopen("outputf.in","w",stdout);
    #endif


    ll t;
    cin>>t;

    while(t--){

        ll n1;
        cin>>n1;

        ll n;
        cin>>n;

        ll arr[n1+1];

        fr(1,n1+1){

            cin>>arr[i];

        }

        //TOP-DOWN APPROACH

        vector<ll> dp1(n+1,-1);

        dp1[0] = 1;

        sumi(n,arr,dp1,n1);

        cout<<dp1[n];
        nline;

        

        //BOTTOM-UP APPROACH (basically use recurrence relations for this.)


        vector<ll> dp(n+1,0);

        dp[0] = 1;

        rep(sum,1,n+1){

            rep(x,1,n1+1){

                if(sum>=arr[x]){

                    dp[sum] = dp[sum] + dp[sum-arr[x]];

                }

            }

        }

        cout<<dp[n];
        nline;
        
    }    

}
